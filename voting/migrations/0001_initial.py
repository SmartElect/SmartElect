# Generated by Django 2.2 on 2019-05-03 14:06

import datetime
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
from django.utils.timezone import utc
import libya_elections.libya_bread


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('register', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Election',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted', models.BooleanField(default=False, verbose_name='deleted')),
                ('creation_date', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='creation date')),
                ('modification_date', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='modification date')),
                ('name_english', models.CharField(max_length=150, verbose_name='name (English)')),
                ('name_arabic', models.CharField(max_length=150, verbose_name='name (Arabic)')),
                ('start_time', models.DateTimeField(blank=True, editable=False, help_text='Earliest time associated with this election - set automatically from other fields', null=True, verbose_name='start time')),
                ('end_time', models.DateTimeField(blank=True, editable=False, help_text='Latest time associated with this election - set automatically from other fields', null=True, verbose_name='end time')),
                ('polling_start_time', models.DateTimeField(verbose_name='polling start time')),
                ('polling_end_time', models.DateTimeField(verbose_name='polling end time')),
                ('work_start_time', models.DateTimeField(default=datetime.datetime(1970, 1, 1, 0, 0, tzinfo=utc), editable=False, help_text='Earliest time that phones can be activated, center opening reports submitted, etc. for this election. Automatically set to midnight two days before the start of polling.', null=True, verbose_name='work start time')),
                ('work_end_time', models.DateTimeField(default=datetime.datetime(1970, 1, 1, 0, 0, tzinfo=utc), editable=False, help_text='Latest time that reports can be submitted for this election. Automatically set to 16 hours after the end of polling.', null=True, verbose_name='work end time')),
            ],
            options={
                'verbose_name': 'election',
                'verbose_name_plural': 'elections',
                'ordering': ['polling_start_time'],
                'permissions': [('browse_election', 'Can list elections'), ('read_election', 'Can read election')],
            },
            bases=(libya_elections.libya_bread.ElectionTimesFormatterMixin, models.Model),
        ),
        migrations.CreateModel(
            name='RegistrationPeriod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted', models.BooleanField(default=False, verbose_name='deleted')),
                ('creation_date', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='creation date')),
                ('modification_date', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='modification date')),
                ('start_time', models.DateTimeField(verbose_name='start time')),
                ('end_time', models.DateTimeField(verbose_name='end time')),
            ],
            options={
                'verbose_name': 'registration period',
                'verbose_name_plural': 'registration periods',
                'permissions': (('read_registrationperiod', 'Can view registration period'), ('browse_registrationperiod', 'Can browse registration periods')),
            },
            bases=(libya_elections.libya_bread.StartEndTimeFormatterMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ReminderQueued',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted', models.BooleanField(default=False, verbose_name='deleted')),
                ('creation_date', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='creation date')),
                ('modification_date', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='modification date')),
                ('message_number', models.IntegerField(verbose_name='message number')),
                ('reminder_number', models.IntegerField(verbose_name='reminder number')),
                ('election', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='voting.Election', verbose_name='election')),
            ],
            options={
                'verbose_name': 'reminder queued',
                'verbose_name_plural': 'reminders queued',
            },
        ),
        migrations.CreateModel(
            name='Ballot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted', models.BooleanField(default=False, verbose_name='deleted')),
                ('creation_date', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='creation date')),
                ('modification_date', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='modification date')),
                ('internal_ballot_number', models.IntegerField(help_text='Number used internally to identify unique ballots across an election.', verbose_name='internal ballot number')),
                ('ballot_type', models.IntegerField(choices=[(0, 'General ballot'), (1, "Women's ballot")], default=0, verbose_name='ballot type')),
                ('num_seats', models.IntegerField(default=1, verbose_name='number of seats')),
                ('election', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ballots', to='voting.Election', verbose_name='election')),
                ('subconstituencies', models.ManyToManyField(blank=True, related_name='ballots', to='register.SubConstituency', verbose_name='subconstituencies')),
            ],
            options={
                'verbose_name': 'ballot',
                'verbose_name_plural': 'ballots',
                'ordering': ['election', 'internal_ballot_number'],
                'permissions': (('browse_ballot', 'Can browse ballots'), ('read_ballot', 'Can view ballot')),
                'unique_together': {('election', 'internal_ballot_number')},
            },
            bases=(libya_elections.libya_bread.ElectionFormatterMixin, libya_elections.libya_bread.SubconstituenciesFormatterMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Candidate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted', models.BooleanField(default=False, verbose_name='deleted')),
                ('creation_date', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='creation date')),
                ('modification_date', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='modification date')),
                ('name_english', models.CharField(max_length=150, verbose_name='name (English)')),
                ('name_arabic', models.CharField(max_length=150, verbose_name='name (Arabic)')),
                ('candidate_number', models.IntegerField(help_text='Number used in text messages when voting for this candidate', verbose_name='candidate number')),
                ('ballot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='candidates', to='voting.Ballot', verbose_name='ballot')),
            ],
            options={
                'verbose_name': 'candidate',
                'verbose_name_plural': 'candidates',
                'ordering': ['ballot', 'candidate_number'],
                'permissions': (('read_candidate', 'Can view candidate'), ('browse_candidate', 'Can browse candidates')),
                'unique_together': {('candidate_number', 'ballot')},
            },
            bases=(libya_elections.libya_bread.BallotFormatterMixin, models.Model),
        ),
    ]
